{"version":3,"sources":["assets/images/saladbowl.png","serviceWorker.js","components/modals/round_screen.jsx","components/modals/end_screen.jsx","components/modals/modal.jsx","components/play/play.jsx","components/options/options.jsx","components/start_screen/start_screen.jsx","components/how_to/how_to.jsx","App.js","Root.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","RoundScreen","this","props","playingTeam","teamA","teamB","playingTeamName","name","length","round","roundType","className","startRound","toggleInput","onClick","displayRound","displayName","points","React","Component","endScreen","winner","to","Modal","modal","component","e","stopPropagation","Play","state","teamAPoints","teamBPoints","word","words","first","setState","time","timer","setInterval","prevState","clearInterval","wordsArr","i","j","Math","floor","random","displayWord","pop","endRound","shuffleWords","unshift","startTimer","closeModal","teamAName","teamBName","pause","bind","correctWord","passWord","Options","display","showAnswers","index","updateFirst","updateInput","field","preventDefault","target","value","currentTarget","alert","idx","array","splice","map","key","removeWord","reverse","input","onSubmit","startResume","type","onChange","defaultChecked","addWord","placeholder","displayAnswers","firstTeam","displayOptions","displayPlay","StartScreen","src","saladbowl","alt","App","exact","path","HowTo","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45a81ad1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/saladbowl.2306fee0.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nexport default class RoundScreen extends React.Component {\n\n    displayName() {\n        const { playingTeam, teamA, teamB } = this.props;\n\n        let playingTeamName = playingTeam ? teamA.name : teamB.name;\n        return playingTeamName[playingTeamName.length - 1] === 's' ? \n            <div><strong>{playingTeamName}</strong>' Turn</div> : \n            <div><strong>{playingTeamName}</strong>'s Turn</div>\n    }\n\n    displayRound() {\n        const { round } = this.props;\n        let roundType = round === 1 ? 'Verbal Clues' : round === 2 ? 'Charades' : 'One Word';\n\n        return (\n            <div className=\"round-container\">\n                <div className=\"round\">\n                    Round {round}\n                </div>\n                <div>\n                    <strong>{roundType}</strong> Round\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        const { teamA, teamB, startRound, toggleInput } = this.props;\n        \n        return (\n            <div className=\"round-screen-container\">\n                <i className=\"fas fa-cogs\" onClick={toggleInput('pause')}></i>\n                <div className=\"round-screen\">\n                    {this.displayRound()}\n                    {this.displayName()}\n                    <div className=\"round-screen-scores\">\n                        <div>\n                            <div>Team: {teamA.name}</div>\n                            <div>Points: {teamA.points}</div>\n                        </div>\n                        <div>\n                            <div>Team: {teamB.name}</div>\n                            <div>Points: {teamB.points}</div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"btn round-screen-btn\" onClick={startRound}>Start Your Turn</div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class endScreen extends React.Component {\n\n    winner() {\n        const { teamA, teamB } = this.props;\n\n        return teamA.points === teamB.points ? 'It is a Draw!' : teamA.points > teamB.points ? `${teamA.name} Wins!` : `${teamB.name} Wins!`;\n    }\n\n    render() {\n        const { teamA, teamB } = this.props;\n        return (\n            <div className=\"end-screen-container\">\n                <div className=\"round-screen\">\n                    <h3>{this.winner()}</h3>\n                    <div className=\"round-screen-scores\">\n                        <div>\n                            <div>Team: {teamA.name}</div>\n                            <div>Points: {teamA.points}</div>\n                        </div>\n                        <div>\n                            <div>Team: {teamB.name}</div>\n                            <div>Points: {teamB.points}</div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"end-screen-btn-container\">\n                    <div className=\"btn round-screen-btn\"><Link to={'/'}>Back to Menu</Link></div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport RoundScreen from './round_screen';\nimport EndScreen from './end_screen';\n\nclass Modal extends React.Component {\n\n    render() {\n        const { modal, teamA, teamB, startRound, playingTeam, round, toggleInput } = this.props;\n        if (!modal) {\n            return null;\n        }\n\n        switch (modal) {\n            case 'roundScreen':\n                this.component = \n                    <RoundScreen \n                        teamA={teamA} \n                        teamB={teamB} \n                        startRound={startRound} \n                        playingTeam={playingTeam} \n                        round={round} \n                        toggleInput={toggleInput}\n                    />\n                break;\n            case 'endScreen':\n                this.component = \n                    <EndScreen \n                        teamA={teamA} \n                        teamB={teamB} \n                        startRound={startRound} \n                        playingTeam={playingTeam}\n                    />\n                break;\n            default:\n                return null;\n        }\n\n        return (\n            <div className=\"modal-background\">\n                <div className=\"modal-child\" onClick={e => e.stopPropagation()}>\n                    {this.component}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Modal;\n","import React from 'react';\nimport Modal from '../modals/modal';\n\nclass Play extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            teamAPoints: 0,\n            teamBPoints: 0,\n            word: '',\n            modal: 'roundScreen',\n            words: this.props.words,\n            playingTeam: this.props.first,\n            round: 1,\n        }\n    }\n\n    startTimer() {\n        this.setState({time: this.props.time})\n        this.timer = setInterval(() => {\n            if (this.state.time > 1) {\n                this.setState((prevState) => ({\n                    time: prevState.time - 1,\n                }))\n            } else {\n                this.setState({modal: 'roundScreen', time: this.props.time, playingTeam: !this.state.playingTeam})\n                clearInterval(this.timer);\n            }\n        }, 1000);\n    }\n\n    closeModal() {\n        this.setState({modal: null});\n    }\n\n    shuffleWords() {\n        let wordsArr = [...this.props.words];\n        for (let i = wordsArr.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [wordsArr[i], wordsArr[j]] = [wordsArr[j], wordsArr[i]];\n        }\n        let displayWord = wordsArr.pop();\n        this.setState({word: displayWord, words: wordsArr});\n    }\n\n    correctWord() {\n        const { words, playingTeam, teamAPoints, teamBPoints } = this.state;\n        let wordsArr = [...words];\n        if (wordsArr.length === 0) {\n            this.endRound();\n        } else {\n            let displayWord = wordsArr.pop();\n            if (playingTeam) {\n                this.setState({ word: displayWord, words: wordsArr, teamAPoints: teamAPoints+1 });\n            } else {\n                this.setState({ word: displayWord, words: wordsArr, teamBPoints: teamBPoints+1 });\n            }\n        }\n    }\n\n    endRound() {\n        const { playingTeam, teamAPoints, teamBPoints, round } = this.state;\n\n        if (playingTeam) {\n            this.setState({ teamAPoints: teamAPoints + 1, time: 0 });\n        } else {\n            this.setState({ teamBPoints: teamBPoints + 1, time: 0 });\n        }\n        \n        if (round === 3) {\n            this.setState({ \n                modal: 'endScreen', \n                time: this.props.time, \n                playingTeam: !playingTeam });\n            clearInterval(this.timer);\n        } else {\n            this.setState({ \n                modal: 'roundScreen', \n                time: this.props.time, \n                playingTeam: !playingTeam, \n                round: round+1 });\n            clearInterval(this.timer);\n            this.shuffleWords();\n        };\n    }\n\n    passWord() {\n        let wordsArr = [...this.state.words];\n        wordsArr.unshift(this.state.word);\n        let displayWord = wordsArr.pop();\n        this.setState({ word: displayWord, words: wordsArr });\n    }\n\n    reset() {\n        return () => {\n            this.setState({words: this.props.words});\n        }\n    }\n\n    startRound() {\n        this.startTimer();\n        this.closeModal();\n        this.shuffleWords();\n    }\n\n    render() {\n        const { teamAName, teamBName, toggleInput, pause } = this.props;\n        const { teamAPoints, teamBPoints, modal, playingTeam, round } = this.state;\n        const teamA = {name: teamAName, points: teamAPoints}\n        const teamB = {name: teamBName, points: teamBPoints}\n        return (\n            <div className={\"play-main\" + (pause ? \" hide\" : \"\")}>\n                <Modal \n                    modal={modal} \n                    startRound={this.startRound.bind(this)} \n                    teamA={teamA} \n                    teamB={teamB} \n                    playingTeam={playingTeam} \n                    round={round} \n                    toggleInput={toggleInput}\n                />\n                <div className=\"play-container\">\n                    <h1 className=\"play-timer\">{this.state.time}</h1>\n                    <h2 className=\"play-display-word\">{this.state.word}</h2>\n                    <div className=\"play-btn-container\">\n                        <button className=\"btn play-btns\" onClick={this.correctWord.bind(this)}>Correct</button>\n                        <button className=\"btn play-btns\" onClick={this.passWord.bind(this)}>Pass</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Play;","import React from 'react';\nimport Play from '../play/play';\n\nclass Options extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            display: true,\n            teamAName: 'Red Team',\n            teamBName: 'Blue Team',\n            words: [],\n            showAnswers: false,\n            first: 'random',\n            time: 60,\n            pause: false,\n        }\n        this.index = 0;\n        this.updateFirst = this.updateFirst.bind(this);\n        this.updateInput = this.updateInput.bind(this);\n        this.toggleInput = this.toggleInput.bind(this);\n    }\n\n    updateInput(field) {\n        return (e) => {\n            e.preventDefault();\n            this.setState({ [field]: e.target.value });\n        };\n    }\n\n    toggleInput(field) {\n        return (e) => {\n            e.preventDefault();\n            this.setState({ [field]: !this.state[field] });\n        }\n    }\n\n    addWord(e) {\n        e.preventDefault();\n        if (e.currentTarget[0].value.length === 0) {\n            alert('Answer can not be blank');\n        } else {\n            this.setState({ words: [...this.state.words, e.currentTarget[0].value]}, () => this.index++)\n            e.currentTarget[0].value = '';\n        }\n    }\n    \n    removeWord(idx) {\n        return () => {\n            let array = this.state.words;\n            array.splice(idx, 1)\n            this.setState({words: array});\n        }\n    }\n    \n    displayAnswers() {\n        const { words, showAnswers } = this.state;\n        return (!showAnswers) ? \n        <div className=\"answers-bank\" onClick={this.toggleInput('showAnswers')}>Show Answer Bank</div> :\n        <div>\n                <div className=\"answers-bank\" onClick={this.toggleInput('showAnswers')}>Hide Answer Bank</div>\n                Answers: {words.length}\n                {words.map((word, i) => <div className=\"answers-bank-word\" key={i} onClick={this.removeWord(i).bind(this)}>{word}</div>).reverse()}\n            </div>\n    }\n    \n    startResume() {\n        const { display, pause } = this.state;\n        if (display) {\n            this.setState({ display: false })\n        } else {\n            this.setState({pause: false});\n        }\n    }\n\n    updateFirst(e) {\n        let input;\n        if (e.target.value === 'true') input = true;\n        if (e.target.value === 'false') input = false;\n        if (e.target.value === 'random') input = 'random';\n        \n        this.setState({first: input});\n    }\n\n    displayOptions() {\n        const { display, pause } = this.state;\n        if (!display && !pause) return null;\n\n        return (\n            <div className=\"options-display\">\n                <div className=\"options-display-left\">\n                    <form className=\"options-form team-names\" onSubmit={this.startResume.bind(this)}>\n                        <label className=\"btn_label\">Team 1's Name: </label>\n                        <input type=\"text\" className=\"options-input\" value={this.state.teamAName} onChange={this.updateInput('teamAName')} />\n                        <label className=\"btn_label\">Team 2's Name: </label>\n                        <input type=\"text\" className=\"options-input\" value={this.state.teamBName} onChange={this.updateInput('teamBName')} />\n                        <div className=\"first-team\" onChange={this.updateFirst}>\n                            <h4>Who goes first?</h4>\n                            <div className=\"options-radio\" >\n                                <input type=\"radio\" name=\"first\" value={true}/>Team 1\n                            </div>\n                            <div className=\"options-radio\">\n                                <input type=\"radio\" name=\"first\" value={false}/>Team 2\n                            </div>\n                            <div className=\"options-radio\">\n                                <input type=\"radio\" name=\"first\" value=\"random\" defaultChecked/>Random\n                            </div>\n                        </div>\n                        <div className=\"time-limit\" >\n                            <h4>Turn Timer</h4>\n                            <input type=\"number\" value={this.state.time} onChange={this.updateInput('time')}/>\n                        </div>\n                        <input type=\"submit\" className=\"btn\" value={pause ? \"Resume Game\" : \"Start Game\"} />\n                    </form>\n                </div>\n                <div className=\"options-display-right\">\n                    <form className=\"options-form-answers\" onSubmit={this.addWord.bind(this)}>\n                        <label>Add to the Answer Bank</label>\n                        <section>\n                            <input type=\"text\" className=\"options-input\" placeholder=\"Add to the answers\" />\n                            <input type=\"submit\" className=\"btn\" value=\"Add Word/Phrase\" />\n                        </section>\n                    </form>\n                    <div className=\"answers-bank-container\">{this.displayAnswers()}</div>\n                </div>\n            </div>\n        )\n    }\n\n    displayPlay() {\n        let { display, teamAName, teamBName, words, first, time, pause } = this.state;\n        if (display) return null;\n\n        let firstTeam = first; \n        if (firstTeam === 'random') {\n            let random = Math.floor(Math.random() * 2);\n            firstTeam = random === 0 ? true : false;\n        } \n\n        return (\n            <Play\n                time={time}\n                first={firstTeam}\n                teamAName={teamAName}\n                teamBName={teamBName}\n                words={words}\n                pause={pause}\n                toggleInput={this.toggleInput}\n            />\n        )\n    }\n\n    render() {\n       \n        return (\n            <div className=\"options-main\">\n                {this.displayOptions()}\n                {this.displayPlay()}\n            </div>\n        )\n    }\n}\n\nexport default Options;","import React from 'react';\nimport saladbowl from '../../assets/images/saladbowl.png';\nimport { Link } from 'react-router-dom';\n\nexport default class StartScreen extends React.Component {\n\n    render() {\n\n        return (\n            <div className=\"start-screen\">\n                <header className=\"start-screen-header\">Saladbowl</header>\n                <div className=\"start-screen-nonheader\">\n                    <div className=\"start-screen-btn-container\">\n                        <Link to={`options`} >Set Up a Game</Link>\n                        <Link to={`how-to`} >How To Play</Link>\n                    </div>\n                    <div className=\"saladbowl-container\">\n                        <img src={saladbowl} className=\"saladbowl\" alt=\"\"/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom';\nexport default class extends React.Component {\n    render() {\n        return (\n        <div className=\"how-to\">\n            \n            <p>\n            1. Fill the answers bank. Every player should add the same amount of answers (Suggested: 3 - 7 answers per player). Answers can be anything from nouns to common expressions (Suggested: Limit it to 5 words per answer; Try not to pick something too obscure for the player base). <br/>\n            </p>\n            <p>\n            2. Split into two teams. Each team sets up their own rotation of players.\n            </p>\n            <p>\n            3. The player who's turn it is, is given a word and must get their team to guess the word based on the rules of the particular round. Once the word is guessed correctly, their team earns a point, and the player is given a new word until the time limit runs out.\n            </p>\n            <p className=\"indent\">\n            a) Round 1, Verbal Clues: You must make your team guess the word by telling them clues, without actually saying the word.\n            </p>\n            <p className=\"indent\">\n            b) Round 2, Charades: You must make your team guess the word by acting out the word, without saying anything.\n            </p>\n            <p className=\"indent\">\n            c) Round 3, One Word: You must make your team guess the word by only saying one word only.\n            </p>\n            <p>\n            4. The teams alternate turns and rotate their own players.\n            </p>\n            <p>\n                5. The team with the most points at the end of three rounds wins.\n            </p>\n            <Link to=\"/\">Back to the Menu</Link>\n        </div>\n        )\n    }\n}","import React from 'react';\nimport { Switch, Route }  from 'react-router-dom';\nimport './App.css';\nimport Options from './components/options/options';\nimport StartScreen from './components/start_screen/start_screen';\nimport HowTo from './components/how_to/how_to';\n\nconst App = () => (\n  <div>\n    <Switch>\n      <Route exact path='/' component={StartScreen}/>\n      <Route path='/how-to' component={HowTo}/>\n      <Route path='/options' component={Options}/>\n    </Switch>\n  </div>\n)\n\nexport default App;","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nfunction Root() {\n    return   (\n    <HashRouter>\n        <App />\n    </HashRouter>)\n};\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}