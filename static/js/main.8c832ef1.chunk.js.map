{"version":3,"sources":["assets/images/saladbowl.png","serviceWorker.js","components/modals/round_screen.jsx","components/modals/end_screen.jsx","components/modals/modal.jsx","components/play/play.jsx","components/options/options.jsx","components/start_screen/start_screen.jsx","components/how_to/how_to.jsx","App.js","Root.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","RoundScreen","teamName","length","this","props","teamA","teamB","startRound","playingTeamName","playingTeam","name","className","displayName","points","onClick","React","Component","endScreen","winner","to","Modal","modal","component","e","stopPropagation","Play","state","teamAPoints","teamBPoints","word","words","time","first","round","timer","setInterval","setState","prevState","clearInterval","wordsArr","i","j","Math","floor","random","displayWord","pop","endRound","shuffleWords","unshift","startTimer","closeModal","teamAName","teamBName","bind","correctWord","passWord","Options","display","showAnswers","index","updateFirst","field","preventDefault","target","value","currentTarget","idx","array","splice","updateAnswers","map","key","removeWord","reverse","input","onSubmit","handleSubmitPlay","type","placeholder","onChange","handleInput","defaultChecked","defaultValue","updateTimer","addWord","displayAnswers","firstTeam","displayOptions","displayPlay","StartScreen","src","saladbowl","App","exact","path","HowTo","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c832ef1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/saladbowl.2306fee0.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nexport default class RoundScreen extends React.Component {\n\n    displayName(teamName) {\n        return teamName[teamName.length - 1] === 's' ? \n            <div>It is {teamName}' Turn</div> : \n            <div>It is {teamName}'s Turn</div>\n    }\n\n    render() {\n        const { teamA, teamB, startRound, playingTeam } = this.props;\n        let playingTeamName = playingTeam ? teamA.name : teamB.name;\n        \n        return (\n            <div className=\"round-screen-container\">\n                <div className=\"round-screen\">\n                    {this.displayName(playingTeamName)}\n                    <div className=\"round-screen-scores\">\n                        <div>\n                            <div>Team: {teamA.name}</div>\n                            <div>Points: {teamA.points}</div>\n                        </div>\n                        <div>\n                            <div>Team: {teamB.name}</div>\n                            <div>Points: {teamB.points}</div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"btn round-screen-btn\" onClick={startRound}>Start Your Turn</div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class endScreen extends React.Component {\n\n    winner() {\n        const { teamA, teamB } = this.props;\n\n        return teamA.points === teamB.points ? 'It is a Draw!' : teamA.points > teamB.points ? `${teamA.name} Wins!` : `${teamB.name} Wins!`;\n    }\n\n    render() {\n\n        return (\n            <div className=\"end-screen-container\">\n                <div className=\"round-screen\">\n                    <h3>{this.winner()}</h3>\n                </div>\n                <div className=\"end-screen-btn-container\">\n                    <div className=\"btn round-screen-btn\"><Link to={'/'}>Back to Menu</Link></div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport RoundScreen from './round_screen';\nimport EndScreen from './end_screen';\n\nclass Modal extends React.Component {\n\n    render() {\n        const { modal, teamA, teamB, startRound, playingTeam } = this.props;\n        if (!modal) {\n            return null;\n        }\n\n        switch (modal) {\n            case 'roundScreen':\n                this.component = <RoundScreen teamA={teamA} teamB={teamB} startRound={startRound} playingTeam={playingTeam}/>\n                break;\n            case 'endScreen':\n                this.component = <EndScreen teamA={teamA} teamB={teamB} startRound={startRound} playingTeam={playingTeam}/>\n                break;\n            default:\n                return null;\n        }\n\n        return (\n            <div className=\"modal-background\">\n                <div className=\"modal-child\" onClick={e => e.stopPropagation()}>\n                    {this.component}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Modal;\n","import React from 'react';\nimport Modal from '../modals/modal';\n\nclass Play extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            teamAPoints: 0,\n            teamBPoints: 0,\n            word: '',\n            modal: 'roundScreen',\n            words: this.props.words,\n            time: this.props.time,\n            playingTeam: this.props.first,\n            round: 1,\n        }\n    }\n\n    startTimer() {\n        this.timer = setInterval(() => {\n            if (this.state.time > 1) {\n                this.setState((prevState) => ({\n                    time: prevState.time - 1,\n                }))\n            } else {\n                this.setState({modal: 'roundScreen', time: this.props.time, playingTeam: !this.state.playingTeam})\n                clearInterval(this.timer);\n            }\n        }, 1000);\n    }\n\n    closeModal() {\n        this.setState({modal: null});\n    }\n\n    shuffleWords() {\n        let wordsArr = [...this.props.words];\n        for (let i = wordsArr.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [wordsArr[i], wordsArr[j]] = [wordsArr[j], wordsArr[i]];\n        }\n        let displayWord = wordsArr.pop();\n        this.setState({word: displayWord, words: wordsArr});\n    }\n\n    correctWord() {\n        const { words, playingTeam, teamAPoints, teamBPoints } = this.state;\n        let wordsArr = [...words];\n        if (wordsArr.length === 0) {\n            this.endRound();\n        } else {\n            let displayWord = wordsArr.pop();\n            if (playingTeam) {\n                this.setState({ word: displayWord, words: wordsArr, teamAPoints: teamAPoints+1 });\n            } else {\n                this.setState({ word: displayWord, words: wordsArr, teamBPoints: teamBPoints+1 });\n            }\n        }\n    }\n\n    endRound() {\n        const { playingTeam, teamAPoints, teamBPoints, round } = this.state;\n\n        if (playingTeam) {\n            this.setState({ teamAPoints: teamAPoints + 1, time: 0 });\n        } else {\n            this.setState({ teamBPoints: teamBPoints + 1, time: 0 });\n        }\n        \n        if (round === 3) {\n            this.setState({ \n                modal: 'endScreen', \n                time: this.props.time, \n                playingTeam: !playingTeam });\n            clearInterval(this.timer);\n        } else {\n            this.setState({ \n                modal: 'roundScreen', \n                time: this.props.time, \n                playingTeam: !playingTeam, \n                round: round+1 });\n            clearInterval(this.timer);\n            this.shuffleWords();\n        };\n    }\n\n    passWord() {\n        let wordsArr = [...this.state.words];\n        wordsArr.unshift(this.state.word);\n        let displayWord = wordsArr.pop();\n        this.setState({ word: displayWord, words: wordsArr });\n    }\n\n    reset() {\n        return () => {\n            this.setState({words: this.props.words});\n        }\n    }\n\n    startRound() {\n        this.startTimer();\n        this.closeModal();\n        this.shuffleWords();\n    }\n\n    render() {\n        const { teamAName, teamBName } = this.props;\n        const { teamAPoints, teamBPoints, modal, playingTeam } = this.state;\n        const teamA = {name: teamAName, points: teamAPoints}\n        const teamB = {name: teamBName, points: teamBPoints}\n        return (\n            <div className=\"play-main\">\n                <Modal modal={modal} startRound={this.startRound.bind(this)} teamA={teamA} teamB={teamB} playingTeam={playingTeam} />\n                <div className=\"play-container\">\n                    <h1 className=\"play-timer\">{this.state.time}</h1>\n                    <h2 className=\"play-display-word\">{this.state.word}</h2>\n                    <div className=\"play-btn-container\">\n                        <button className=\"btn play-btns\" onClick={this.correctWord.bind(this)}>Correct</button>\n                        <button className=\"btn play-btns\" onClick={this.passWord.bind(this)}>Pass</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Play;","import React from 'react';\nimport Play from '../play/play';\n\nclass Options extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            display: true,\n            teamAName: 'Red Team',\n            teamBName: 'Blue Team',\n            words: [],\n            showAnswers: false,\n            first: 'random',\n            time: 60,\n        }\n        this.index = 0;\n        this.updateFirst = this.updateFirst.bind(this);\n    }\n\n    handleInput(field) {\n        return (e) => {\n            e.preventDefault();\n            this.setState({ [field]: e.target.value });\n        };\n    }\n\n    handleSubmitPlay() {\n        this.setState({display: false})\n    }\n\n    addWord(e) {\n        e.preventDefault();\n        this.setState({ words: [...this.state.words, e.currentTarget[0].value]}, () => this.index++)\n        e.currentTarget[0].value = '';\n    }\n\n    removeWord(idx) {\n        return () => {\n            let array = this.state.words;\n            array.splice(idx, 1)\n            this.setState({words: array});\n        }\n    }\n\n    displayAnswers() {\n        const { words, showAnswers } = this.state;\n        return (!showAnswers) ? \n            <div className=\"answers-bank\" onClick={this.updateAnswers.bind(this)}>Show Answer Bank</div> :\n            <div>\n                <div className=\"answers-bank\" onClick={this.updateAnswers.bind(this)}>Hide Answer Bank</div>\n                Answers: {words.length}\n                {words.map((word, i) => <div className=\"answers-bank-word\" key={i} onClick={this.removeWord(i).bind(this)}>{word}</div>).reverse()}\n            </div>\n    }\n\n    updateFirst(e) {\n        let input;\n        if (e.target.value === 'true') input = true;\n        if (e.target.value === 'false') input = false;\n        if (e.target.value === 'random') input = 'random';\n        \n        this.setState({first: input});\n    }\n\n    updateAnswers() {\n        this.setState({showAnswers: !this.state.showAnswers});\n    }\n\n    updateTimer(e) {\n        this.setState({time: e.currentTarget.value})\n    }\n\n    displayOptions() {\n        const { display } = this.state;\n        if (!display) return null;\n\n        return (\n            <div className=\"options-display\">\n                <div className=\"options-display-left\">\n                    <form className=\"options-form team-names\" onSubmit={this.handleSubmitPlay.bind(this)}>\n                        <label className=\"btn_label\">Team 1's Name: </label>\n                        <input type=\"text\" className=\"options-input\" placeholder=\"Red Team\" onChange={this.handleInput('teamAName').bind(this)} />\n                        <label className=\"btn_label\">Team 2's Name: </label>\n                        <input type=\"text\" className=\"options-input\" placeholder=\"Blue Team\" onChange={this.handleInput('teamBName').bind(this)} />\n                        <div className=\"first-team\" onChange={this.updateFirst}>\n                            <h4>Who goes's first?</h4>\n                            <div className=\"options-radio\" >\n                                <input type=\"radio\" name=\"first\" value={true}/>Team 1\n                            </div>\n                            <div className=\"options-radio\">\n                                <input type=\"radio\" name=\"first\" value={false}/>Team 2\n                            </div>\n                            <div className=\"options-radio\">\n                                <input type=\"radio\" name=\"first\" value=\"random\" defaultChecked/>Random\n                            </div>\n                        </div>\n                        <div className=\"time-limit\" >\n                            <h4>Turn Timer</h4>\n                            <input type=\"number\" defaultValue=\"60\" onChange={this.updateTimer.bind(this)}/>\n                        </div>\n                        <input type=\"submit\" className=\"btn\" value=\"Start Game\" />\n                    </form>\n                </div>\n                <div className=\"options-display-right\">\n                    <form className=\"options-form-answers\" onSubmit={this.addWord.bind(this)}>\n                        <label>Add to the Answer Bank</label>\n                        <section>\n                            <input type=\"text\" className=\"options-input\" placeholder=\"Add to the answers\" />\n                            <input type=\"submit\" className=\"btn\" value=\"Add Word/Phrase\" />\n                        </section>\n                    </form>\n                    <div className=\"answers-bank-container\">{this.displayAnswers()}</div>\n                </div>\n            </div>\n        )\n    }\n\n    displayPlay() {\n        let { display, teamAName, teamBName, words, first, time } = this.state;\n        if (display) return null;\n\n        let firstTeam = first; \n        if (firstTeam === 'random') {\n            let random = Math.floor(Math.random() * 2);\n            firstTeam = random === 0 ? true : false;\n        } \n\n        return (\n            <Play\n                time={time}\n                first={firstTeam}\n                teamAName={teamAName}\n                teamBName={teamBName}\n                words={words}\n            />\n        )\n    }\n\n    render() {\n       \n        return (\n            <div className=\"options-main\">\n                {this.displayOptions()}\n                {this.displayPlay()}\n            </div>\n        )\n    }\n}\n\nexport default Options;","import React from 'react';\nimport saladbowl from '../../assets/images/saladbowl.png';\nimport { Link } from 'react-router-dom';\n\nexport default class StartScreen extends React.Component {\n\n    render() {\n\n        return (\n            <div className=\"start-screen\">\n                <div className=\"start-screen-btn-container\">\n                    <Link to={`options`} >Set Up a Game</Link>\n                    <Link to={`how-to`} >How To Play</Link>\n                </div>\n                <div className=\"saladbowl-container\">\n                    <img src={saladbowl} className=\"saladbowl\"/>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nexport default class extends React.Component {\n    render() {\n        return (\n        <div className=\"how-to\">TBD</div>\n        )\n    }\n}","import React from 'react';\nimport { Switch, Route }  from 'react-router-dom';\nimport './App.css';\nimport Options from './components/options/options';\nimport StartScreen from './components/start_screen/start_screen';\nimport HowTo from './components/how_to/how_to';\n\nconst App = () => (\n  <div>\n    <Switch>\n      <Route exact path='/' component={StartScreen}/>\n      <Route path='/how-to' component={HowTo}/>\n      <Route path='/options' component={Options}/>\n    </Switch>\n  </div>\n)\n\nexport default App;","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nfunction Root() {\n    return   (\n    <HashRouter>\n        <App />\n    </HashRouter>)\n};\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}