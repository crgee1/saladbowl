{"version":3,"sources":["assets/audio/correct.wav","assets/audio/pass.flac","assets/audio/over.wav","assets/audio/timeSound1.wav","assets/images/saladbowl.png","serviceWorker.js","components/modals/round_screen.jsx","components/modals/end_screen.jsx","components/modals/modal.jsx","components/play/play.jsx","components/options/options.jsx","components/start_screen/start_screen.jsx","components/how_to/how_to.jsx","App.js","Root.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","RoundScreen","props","teamA","teamB","startRound","toggleInput","className","onClick","round","roundType","displayRound","playingTeam","playingTeamName","name","length","displayName","points","endScreen","winner","to","Modal","component","modal","e","stopPropagation","Play","useState","teamAPoints","setTeamAPoints","teamBPoints","setTeamBPoints","word","setWord","words","setWords","time","setTime","setModal","first","setPlayingTeam","setRound","ref","useRef","teamAName","teamBName","pause","sound","useEffect","clearInterval","current","timer","ticker","Audio","over","play","endRound","timeSound","addEventListener","setInterval","startTimer","wordsArr","i","j","Math","floor","random","displayWord","pop","shuffleWords","correct","unshift","pass","Options","state","display","sessionStorage","getItem","JSON","parse","showAnswers","updateFirst","bind","updateInput","field","preventDefault","ele","target","value","setState","setItem","currentTarget","alert","newWord","this","stringify","idx","array","splice","map","key","removeWord","reverse","input","clear","reset","onChange","type","defaultChecked","onSubmit","addWord","placeholder","displayAnswers","displaySound","displayQuestion","displayReset","startResume","displayFirst","displayAnswerBank","firstTeam","displayOptions","displayPlay","React","Component","StartScreen","src","saladbowl","alt","HowTo","App","exact","path","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ded24515.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correct.7e864110.wav\";","module.exports = __webpack_public_path__ + \"static/media/pass.5e94467d.flac\";","module.exports = __webpack_public_path__ + \"static/media/over.4dfa7ee1.wav\";","module.exports = __webpack_public_path__ + \"static/media/timeSound1.39f4e7ef.wav\";","module.exports = __webpack_public_path__ + \"static/media/saladbowl.2306fee0.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nexport default function RoundScreen(props) {\n\n    const displayName = () => {\n        const { playingTeam, teamA, teamB } = props;\n\n        let playingTeamName = playingTeam ? teamA.name : teamB.name;\n        return playingTeamName[playingTeamName.length - 1] === 's' ? \n            <div><strong>{playingTeamName}</strong>' Turn</div> : \n            <div><strong>{playingTeamName}</strong>'s Turn</div>\n    }\n\n    const displayRound = () => {\n        const { round } = props;\n        let roundType = round === 1 ? 'Verbal Clues' : round === 2 ? 'Charades' : 'One Word';\n\n        return (\n            <div className=\"round-container\">\n                <div className=\"round\">\n                    Round {round}\n                </div>\n                <div>\n                    <strong>{roundType}</strong> Round\n                </div>\n            </div>\n        )\n    }\n\n    const { teamA, teamB, startRound, toggleInput } = props;\n        \n    return (\n        <div className=\"round-screen-container\">\n            <i className=\"fas fa-cogs\" onClick={toggleInput('pause')}></i>\n            <div className=\"round-screen\">\n                {displayRound()}\n                {displayName()}\n                <div className=\"round-screen-scores\">\n                    <div className=\"team-scores\">\n                        <div>Team: {teamA.name}</div>\n                        <div>Points: {teamA.points}</div>\n                    </div>\n                    <div className=\"team-scores\">\n                        <div>Team: {teamB.name}</div>\n                        <div>Points: {teamB.points}</div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"btn round-screen-btn\" onClick={startRound}>Start Your Turn</div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function endScreen(props) {\n\n    const winner = () => {\n        const { teamA, teamB } = props;\n\n        return teamA.points === teamB.points ? 'It is a Draw!' : teamA.points > teamB.points ? `${teamA.name} Wins!` : `${teamB.name} Wins!`;\n    }\n\n    const { teamA, teamB } = props;\n    \n    return (\n        <div className=\"end-screen-container\">\n            <div className=\"round-screen\">\n                <h3>{winner()}</h3>\n                <div className=\"round-screen-scores\">\n                    <div>\n                        <div>Team: {teamA.name}</div>\n                        <div>Points: {teamA.points}</div>\n                    </div>\n                    <div>\n                        <div>Team: {teamB.name}</div>\n                        <div>Points: {teamB.points}</div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"end-screen-btn-container\">\n                <Link to={'/'}><div className=\"btn round-screen-btn\">Back to Menu</div></Link>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport RoundScreen from './round_screen';\nimport EndScreen from './end_screen';\n\nexport default function Modal(props) {\n    const { modal, teamA, teamB, startRound, playingTeam, round, toggleInput } = props;\n        \n    if (!modal) {\n        return null;\n    }\n\n    let component;\n\n    switch (modal) {\n        case 'roundScreen':\n            component = \n                <RoundScreen \n                    teamA={teamA} \n                    teamB={teamB} \n                    startRound={startRound} \n                    playingTeam={playingTeam} \n                    round={round} \n                    toggleInput={toggleInput}\n                />\n            break;\n        case 'endScreen':\n            component = \n                <EndScreen \n                    teamA={teamA} \n                    teamB={teamB} \n                    startRound={startRound} \n                    playingTeam={playingTeam}\n                />\n            break;\n        default:\n            return null;\n    }\n\n    return (\n        <div className=\"modal-background\">\n            <div className=\"modal-child\" onClick={e => e.stopPropagation()}>\n                {component}\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport Modal from '../modals/modal';\nimport correct from '../../assets/audio/correct.wav';\nimport pass from '../../assets/audio/pass.flac';\nimport over from '../../assets/audio/over.wav'\nimport timeSound from '../../assets/audio/timeSound1.wav'\n\nexport default function Play(props) {\n\n    const [teamAPoints, setTeamAPoints] = useState(0);\n    const [teamBPoints, setTeamBPoints] = useState(0);\n    const [word, setWord] = useState('');\n    const [words, setWords] = useState(props.words);\n    const [time, setTime] = useState(props.time);\n    const [modal, setModal] = useState('roundScreen');\n    const [playingTeam, setPlayingTeam] = useState(props.first);\n    const [round, setRound] = useState(1);\n    const ref = useRef();\n\n    const { teamAName, teamBName, toggleInput, pause, sound } = props;\n    \n    const endTurn = () => {\n        setModal('roundScreen');\n        setWords([word, ...words]);\n        clearInterval(ref.current.timer);\n        ref.current.ticker.pause();\n        setPlayingTeam(!playingTeam);\n        setTime(props.time);\n        if (sound) new Audio(over).play();\n    }\n\n    useEffect(() => {\n        if (time < 1) {\n            endTurn();\n        }\n    });\n\n    const startTimer = () => {\n        setTime(props.time);\n        const ticker = new Audio(timeSound);\n        ticker.addEventListener('ended', () => {\n            ticker.play();\n        });\n        ref.current = {ticker}\n        if (sound) ticker.play();\n        const timer = setInterval(() => {\n            setTime(time => time-1);\n        }, 1000);\n        ref.current.timer = timer;\n    }\n    \n    const shuffleWords = () => {\n        let wordsArr = [...words];\n        for (let i = wordsArr.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [wordsArr[i], wordsArr[j]] = [wordsArr[j], wordsArr[i]];\n        }\n        let displayWord = wordsArr.pop();\n        setWords(wordsArr);\n        setWord(displayWord);\n    }\n\n    const givePoints = () => {\n        if (playingTeam) {\n            setTeamAPoints(teamAPoints + 1);\n        } else {\n            setTeamBPoints(teamBPoints + 1);\n        }\n    }\n\n    const correctWord = () => {\n        let wordsArr = [...words];\n        givePoints();\n        if (wordsArr.length === 0) {\n            endRound();\n        } else {\n            let displayWord = wordsArr.pop();\n            setWord(displayWord);\n            setWords(wordsArr);\n        }\n        if (sound) new Audio(correct).play();\n    }\n\n    const endRound = () => {\n        if (round === 3) {\n            setModal('endScreen');\n            ref.current.ticker.pause();\n        } else {\n            setModal('roundScreen');\n            setRound(round+1);\n            setWords(props.words);\n            ref.current.ticker.pause();\n        };\n        clearInterval(ref.current.timer);\n        setPlayingTeam(!playingTeam);\n        setTime(props.time);\n        setWords(props.words);\n    }\n\n    const passWord = () => {\n        let wordsArr = [...words];\n        wordsArr.unshift(word);\n        let displayWord = wordsArr.pop();\n        setWord(displayWord);\n        setWords(wordsArr);\n        if (sound) new Audio(pass).play();\n    }\n\n    const startRound = () => {\n        startTimer();\n        setModal(null);\n        shuffleWords();\n    }\n\n    const teamA = { name: teamAName, points: teamAPoints }\n    const teamB = { name: teamBName, points: teamBPoints }\n\n    return (\n        <div className={\"play-main\" + (pause ? \" hide\" : \"\")}>\n            <Modal\n                modal={modal}\n                startRound={startRound}\n                teamA={teamA}\n                teamB={teamB}\n                playingTeam={playingTeam}\n                round={round}\n                toggleInput={toggleInput}\n            />\n            <div className=\"play-container\">\n                <h1 className=\"play-timer\">{time}</h1>\n                <h2 className=\"play-display-word\">{word}</h2>\n                <div className=\"play-btn-container\">\n                    <button className=\"btn play-btns\" onClick={correctWord}>Correct</button>\n                    <button className=\"btn play-btns\" onClick={passWord}>Pass</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n// class Play extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             teamAPoints: 0,\n//             teamBPoints: 0,\n//             word: '',\n//             modal: 'roundScreen',\n//             words: this.props.words,\n//             playingTeam: this.props.first,\n//             round: 1,\n//         }\n//     }\n\n//     startTimer() {\n//         const { time, sound } = this.props;\n\n//         this.setState({time: time})\n//         this.timer = setInterval(() => {\n//             if (this.state.time > 1) {\n//                 this.setState((prevState) => ({\n//                     time: prevState.time - 1,\n//                 }))\n//             } else {\n//                 this.setState({modal: 'roundScreen', time, playingTeam: !this.state.playingTeam})\n//                 if (sound) new Audio(over).play();\n//                 clearInterval(this.timer);\n//             }\n//         }, 1000);\n//     }\n\n//     shuffleWords() {\n//         let wordsArr = [...this.props.words];\n//         for (let i = wordsArr.length - 1; i > 0; i--) {\n//             let j = Math.floor(Math.random() * (i + 1));\n//             [wordsArr[i], wordsArr[j]] = [wordsArr[j], wordsArr[i]];\n//         }\n//         let displayWord = wordsArr.pop();\n//         this.setState({word: displayWord, words: wordsArr});\n//     }\n\n//     correctWord() {\n//         const { words, playingTeam, teamAPoints, teamBPoints } = this.state;\n//         let wordsArr = [...words];\n//         if (wordsArr.length === 0) {\n//             this.endRound();\n//         } else {\n//             let displayWord = wordsArr.pop();\n//             if (playingTeam) {\n//                 this.setState({ word: displayWord, words: wordsArr, teamAPoints: teamAPoints+1 });\n//             } else {\n//                 this.setState({ word: displayWord, words: wordsArr, teamBPoints: teamBPoints+1 });\n//             }\n//         }\n//         if (this.sound) new Audio(correct).play();\n//     }\n\n//     endRound() {\n//         const { playingTeam, teamAPoints, teamBPoints, round } = this.state;\n\n//         if (playingTeam) {\n//             this.setState({ teamAPoints: teamAPoints + 1, time: 0 });\n//         } else {\n//             this.setState({ teamBPoints: teamBPoints + 1, time: 0 });\n//         }\n        \n//         if (round === 3) {\n//             this.setState({ \n//                 modal: 'endScreen', \n//                 time: this.props.time, \n//                 playingTeam: !playingTeam });\n//             clearInterval(this.timer);\n//         } else {\n//             this.setState({ \n//                 modal: 'roundScreen', \n//                 time: this.props.time, \n//                 playingTeam: !playingTeam, \n//                 round: round+1 });\n//             clearInterval(this.timer);\n//             this.shuffleWords();\n//         };\n//     }\n\n//     passWord() {\n//         let wordsArr = [...this.state.words];\n//         wordsArr.unshift(this.state.word);\n//         let displayWord = wordsArr.pop();\n//         this.setState({ word: displayWord, words: wordsArr });\n\n//         if (this.props.sound) new Audio(pass).play();\n//     }\n\n//     startRound() {\n//         this.startTimer();\n//         this.setState({modal: null});\n//         this.shuffleWords();\n//     }\n\n//     render() {\n//         const { teamAName, teamBName, toggleInput, pause } = this.props;\n//         const { teamAPoints, teamBPoints, modal, playingTeam, round } = this.state;\n//         const teamA = {name: teamAName, points: teamAPoints}\n//         const teamB = {name: teamBName, points: teamBPoints}\n//         return (\n//             <div className={\"play-main\" + (pause ? \" hide\" : \"\")}>\n//                 <Modal \n//                     modal={modal} \n//                     startRound={this.startRound.bind(this)} \n//                     teamA={teamA} \n//                     teamB={teamB} \n//                     playingTeam={playingTeam} \n//                     round={round} \n//                     toggleInput={toggleInput}\n//                 />\n//                 <div className=\"play-container\">\n//                     <h1 className=\"play-timer\">{this.state.time}</h1>\n//                     <h2 className=\"play-display-word\">{this.state.word}</h2>\n//                     <div className=\"play-btn-container\">\n//                         <button className=\"btn play-btns\" onClick={this.correctWord.bind(this)}>Correct</button>\n//                         <button className=\"btn play-btns\" onClick={this.passWord.bind(this)}>Pass</button>\n//                     </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n","import React from 'react';\nimport Play from '../play/play';\nimport { Link } from 'react-router-dom';\n\nclass Options extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            display: true,\n            teamAName: sessionStorage.getItem('teamAName') || 'Red Team',\n            teamBName: sessionStorage.getItem('teamBName') ||'Blue Team',\n            words: JSON.parse(sessionStorage.getItem('words')) || [],\n            showAnswers: false,\n            first: 'random',\n            time: sessionStorage.getItem('time') || 60,\n            pause: false,\n            sound: false,\n        }\n        this.updateFirst = this.updateFirst.bind(this);\n        this.updateInput = this.updateInput.bind(this);\n        this.toggleInput = this.toggleInput.bind(this);\n    }\n\n    updateInput(field) {\n        return (e) => {\n            e.preventDefault();\n            let ele = e.target.value;\n            this.setState({ [field]: ele }, () => sessionStorage.setItem(field, ele));\n        };\n    }\n\n    toggleInput(field) {\n        return (e) => {\n            e.preventDefault();\n            this.setState({ [field]: !this.state[field] });\n        }\n    }\n\n    addWord(e) {\n        e.preventDefault();\n        if (e.currentTarget[0].value.length === 0) {\n            alert('Answer can not be blank');\n        } else {\n            const newWord = e.currentTarget[0].value;\n            this.setState({ words: [...this.state.words, newWord] }, () => sessionStorage.setItem('words', JSON.stringify(this.state.words)))\n            e.currentTarget[0].value = '';\n        }\n    }\n    \n    removeWord(idx) {\n        return () => {\n            let array = this.state.words;\n            array.splice(idx, 1)\n            this.setState({words: array}, () => sessionStorage.setItem('words', JSON.stringify(array)));\n        }\n    }\n    \n    displayAnswers() {\n        const { words, showAnswers } = this.state;\n        return (!showAnswers) ? \n        <div className=\"answers-bank\" onClick={this.toggleInput('showAnswers')}>Show Answer Bank</div> :\n        <div>\n                <div className=\"answers-bank\" onClick={this.toggleInput('showAnswers')}>Hide Answer Bank</div>\n                Answers: {words.length}\n                {words.map((word, i) => <div className=\"answers-bank-word\" key={i} onClick={this.removeWord(i).bind(this)}>{word}</div>).reverse()}\n            </div>\n    }\n    \n    startResume() {\n        const { display, words } = this.state;\n        if (words.length === 0) {\n            alert(\"Your answer bank is looking pretty empty\")\n        } else if (display) {\n            this.setState({ display: false })\n        } else {\n            this.setState({pause: false});\n        }\n    }\n\n    updateFirst(e) {\n        let input;\n        if (e.target.value === 'true') input = true;\n        if (e.target.value === 'false') input = false;\n        if (e.target.value === 'random') input = 'random';\n        \n        this.setState({first: input});\n    }\n\n    reset() {\n        sessionStorage.clear();\n        this.setState({\n            words: [],\n            time: 60,\n            teamAName: 'Red Team',\n            teamBName: 'Blue Team',\n        });\n    }\n\n    displaySound() {\n        const { sound } = this.state;\n        return (\n            <div className=\"sound-effects\" onClick={this.toggleInput('sound')}>\n                <i className={\"fas\" + (sound ? \" fa-volume-up\" : \" fa-volume-mute\")}></i>\n            </div>)\n    }\n\n    displayQuestion() {\n        const { pause } = this.state;\n        if (pause) return null;\n\n        return (\n            <div className=\"question-mark\"><Link to=\"/how-to\"><i className=\"fas fa-question\"></i></Link></div>\n        )\n    }\n\n    displayReset() {\n        const { pause } = this.state;\n        if (pause) return null;\n\n        return (\n            <div className=\"question-mark\" onClick={this.reset.bind(this)}><i className=\"fas fa-trash\"></i></div>\n        )\n    }\n\n    displayFirst() {\n        const { pause } = this.state;\n        if (pause) return null;\n\n        return (\n            <div className=\"first-team\" onChange={this.updateFirst}>\n                <h4>Who goes first?</h4>\n                <div className=\"options-radio\" >\n                    <input type=\"radio\" name=\"first\" value={true} />Team 1\n                </div>\n                <div className=\"options-radio\">\n                    <input type=\"radio\" name=\"first\" value={false} />Team 2\n                </div>\n                <div className=\"options-radio\">\n                    <input type=\"radio\" name=\"first\" value=\"random\" defaultChecked />Random\n                </div>\n            </div>\n        )\n    }\n\n    displayAnswerBank() {\n        const { pause } = this.state;\n\n        if (pause) return null;\n\n        return (\n        <div className=\"options-display-right\">\n            <form className=\"options-form-answers\" onSubmit={this.addWord.bind(this)}>\n                <label className=\"btn-label\">Add to the Answer Bank</label>\n                <section>\n                    <input type=\"text\" className=\"options-input\" placeholder=\"Add to the answers\" />\n                    <input type=\"submit\" className=\"btn\" value=\"Add Word/Phrase\" />\n                </section>\n            </form>\n            <div className=\"answers-bank-container\">{this.displayAnswers()}</div>\n        </div>\n        )\n    }\n\n    displayOptions() {\n        const { display, pause } = this.state;\n        if (!display && !pause) return null;\n\n        return (\n            <div className=\"options-display\">\n                <div className=\"options-btn-container\">\n                    {this.displaySound()}\n                    {this.displayQuestion()}\n                    {this.displayReset()}\n                </div>\n                <div className=\"options-display-left\">\n                    <form className=\"options-form team-names\" onSubmit={this.startResume.bind(this)}>\n                        <label className=\"btn-label\">Team 1's Name: </label>\n                        <input type=\"text\" className=\"options-input\" value={this.state.teamAName} onChange={this.updateInput('teamAName')} />\n                        <label className=\"btn-label\">Team 2's Name: </label>\n                        <input type=\"text\" className=\"options-input\" value={this.state.teamBName} onChange={this.updateInput('teamBName')} />\n                        {this.displayFirst()}\n                        <div className=\"time-limit\" >\n                            <h4>Turn Timer</h4>\n                            <input type=\"number\" className=\"options-input\" value={this.state.time} onChange={this.updateInput('time')}/>\n                        </div>\n                        <input type=\"submit\" className=\"btn\" value={pause ? \"Resume Game\" : \"Start Game\"} />\n                    </form>\n                </div>\n                {this.displayAnswerBank()}\n            </div>\n        )\n    }\n\n    displayPlay() {\n        let { display, teamAName, teamBName, words, first, time, pause, sound } = this.state;\n        if (display) return null;\n\n        let firstTeam = first; \n        if (firstTeam === 'random') {\n            let random = Math.floor(Math.random() * 2);\n            firstTeam = random === 0 ? true : false;\n        } \n\n        return (\n            <Play\n                time={time}\n                first={firstTeam}\n                teamAName={teamAName}\n                teamBName={teamBName}\n                words={words}\n                pause={pause}\n                sound={sound}\n                toggleInput={this.toggleInput}\n            />\n        )\n    }\n\n    render() {\n       \n        return (\n            <div className=\"options-main\">\n                {this.displayOptions()}\n                {this.displayPlay()}\n            </div>\n        )\n    }\n}\n\nexport default Options;","import React from 'react';\nimport saladbowl from '../../assets/images/saladbowl.png';\nimport { Link } from 'react-router-dom';\n\nexport default class StartScreen extends React.Component {\n\n    render() {\n\n        return (\n            <div className=\"start-screen\">\n                <header className=\"start-screen-header\">Salad Bowl</header>\n                <div className=\"start-screen-nonheader\">\n                    <div className=\"start-screen-btn-container\">\n                        <Link to={`options`} >Set Up a Game</Link>\n                        <Link to={`how-to`} >How To Play</Link>\n                    </div>\n                    <div className=\"saladbowl-container\">\n                        <img src={saladbowl} className=\"saladbowl\" alt=\"\"/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nexport default function HowTo() {\n    return (\n        <div className=\"how-to\">\n            <header><strong> How To Play</strong></header>\n            <p>\n                1. Fill the answer bank. Every player should add the same amount of answers (Suggested: 3 - 7 answers per player). Answers can be anything from nouns to common expressions (Suggested: Limit it to 5 words per answer; Try not to pick something too obscure for the player base). <br/>\n            </p>\n            <p>\n                2. Split into two teams. Each team sets up their own rotation of players.\n            </p>\n            <p>\n                3. The player who's turn it is, is given a word and must get their team to guess the word based on the rules of the particular round. Once the word is guessed correctly, their team earns a point, and the player is given a new word until the time limit runs out.\n            </p>\n            <p className=\"indent\">\n                a) Round 1, Verbal Clues: You must make your team guess the word by telling them clues, without actually saying any part of the answer.\n            </p>\n            <p className=\"indent\">\n                b) Round 2, Charades: You must make your team guess the word by acting out the word, without saying anything.\n            </p>\n            <p className=\"indent\">\n                c) Round 3, One Word: You must make your team guess the word by only saying one word, that word can not be any part of the answer.\n            </p>\n            <p>\n                4. The teams alternate turns.\n            </p>\n            <p>\n                5. A round ends when all the answers in the answer bank have been guessed correctly.\n            </p>\n            <p>\n                6. The team with the most points at the end of three rounds wins.\n            </p>\n            <Link className=\"back-btn\" to=\"/\">Back to the Menu</Link>\n        </div>\n    );\n}","import React from 'react';\nimport { Switch, Route }  from 'react-router-dom';\nimport './App.css';\nimport Options from './components/options/options';\nimport StartScreen from './components/start_screen/start_screen';\nimport HowTo from './components/how_to/how_to';\n\nconst App = () => (\n  <div>\n    <Switch>\n      <Route exact path='/' component={StartScreen}/>\n      <Route path='/how-to' component={HowTo}/>\n      <Route path='/options' component={Options}/>\n    </Switch>\n  </div>\n)\n\nexport default App;","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nfunction Root() {\n    return   (\n    <HashRouter>\n        <App />\n    </HashRouter>)\n};\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}